#!/usr/bin/env python3

##############################
#  Needs to be run as root!  #
##############################

from appJar import gui
from subprocess import Popen
from SettingsRW import *
from time import sleep
from threading import Thread

theme1 = getSetting("theme")
language = getSetting("language")

try:
    from watchdog.observers import Observer
    from watchdog.events import FileSystemEventHandler

    class Watcher:
        DIRECTORY_TO_WATCH = "/usr/local/bin/Solar Pi/Settings"  # Looks at settings

        def __init__(self):
            self.observer = Observer()

        def run(self):
            event_handler = Handler()
            self.observer.schedule(event_handler, self.DIRECTORY_TO_WATCH, recursive=True)
            self.observer.start()
            try:
                while True:
                    sleep(5)
            except:
                self.observer.stop()
                print("Error")

            self.observer.join()


    class Handler(FileSystemEventHandler):

        @staticmethod
        def on_any_event(event):
            if event.is_directory:
                return None

            elif event.event_type == 'created':
                # Take any action here when a file is first created.
                print("Received created event")  # Triggered when a file is created

            elif event.event_type == 'modified':
                # Taken any action here when a file is modified.
                print("Received modified event")
                settings()  # Calls meter() when file is modified

except:
    pass

def settings(first=False):
    global theme1
    theme2 = getSetting("theme")

    if theme1 != theme2 or first == True:
        if theme2 == "Solar Pi":
            app.setTtkTheme("plastik")
            app.setTtkTheme("clam")
            # app.ttkStyle.configure(".", font="10", background="white")

            # Highlighted button
            app.ttkStyle.configure("H.TButton", background="#324581", foreground="white", bordercolor="#687396")
            app.ttkStyle.map("H.TButton", background=[("pressed", "#172141"), ("active", "#4059a9")])

            # Regular button
            app.ttkStyle.configure("TButton", background="#dbdce2", bordercolor="#687396")

            # LabelFrame colour
            app.ttkStyle.configure("TLabelframe", bordercolor="#687396")

            app.setBg("white")

        else:
            app.setTtkTheme(theme2)
            app.setLabelFrameStyle("Languages", "TFrame")
            app.setLabelFrameStyle("English", "TFrame")
            app.setLabelFrameStyle("Español", "TFrame")
            if theme2 != "black":
                app.ttkStyle.configure(".", background="white", foreground="black")
                app.setBg("white")

        app.setFont(family="piboto")
        app.ttkStyle.configure(".", font=("piboto"))
        app.ttkStyle.configure("H.TLabel", font=("piboto", 12, "bold"))

        theme1 = theme2


def LanguageHandler(press):
    global language
    if press == "English" and language != "english":
        setSetting("language", "english")
        with open("/etc/default/locale", "w") as file:
            file.write("#  File generated by update-locale\nLANG=en_GB.UTF-8\n")
            app.changeLanguage("english")
        app.setLabel("language", "English")
        language = "english"
        if app.yesNoBox("Reboot", "You need to reboot your Solar Pi to apply these changes.\nWould you like to reboot now?") == True:
            Popen("/usr/local/bin/Solar Pi/Resources/Launchers/Reboot.sh")

    elif press == "Español" and language != "spanish":
        setSetting("language", "spanish")
        with open("/etc/default/locale", "w") as file:
            file.write("#  File generated by update-locale\nLANG=es_ES.UTF-8\n")
            app.changeLanguage("spanish")
        app.setLabel("language", "Spanish")
        language = "spanish"
        if app.yesNoBox("Reboot", "You need to reboot your Solar Pi to apply these changes.\nWould you like to reboot now?") == True:
            Popen("/usr/local/bin/Solar Pi/Resources/Launchers/Reboot.sh")


with gui("Languages", useTtk=True) as app:
    app.setResizable(False)

    app.setPadding(5, 5)
    with app.labelFrame("Languages"):
        app.setPadding(5, 5)
        app.setSticky("nesw")

        with app.frame("language info"):
            app.addLabel("language_info", "The current language is:")

            app.addLabel("language", language[0].upper() + language[1:], 0, 1)
            app.setLabelSticky("language", "w")
            app.setLabelStyle("language", "H.TLabel")

        app.addLabel("info_english", "Click or tap on the button to change the language.\nPlease only change it if the current language is not suitable for you.")
        app.addLabel("info_spanish", "Haz clic o toca el botón para cambiar el idioma.\nCambie solo si el idioma actual no es adecuado para usted.")

        with app.frame("langauges"):
            with app.labelFrame("English", 0, 0):
                app.setPadding(5, 5)
                app.addImage("uk_flag", "../Resources/Images/uk_flag.gif")
                app.addButton("English", LanguageHandler, 0, 1)

            with app.labelFrame("Español", 0, 1):
                app.setPadding(5, 5)
                app.addImage("spain_flag", "../Resources/Images/spain_flag.gif")
                app.addButton("Español", LanguageHandler, 0, 1)

    app.changeLanguage(language)

    try:
        w = Watcher()
        t = Thread(target=w.run)
        t.start()
    except:
        pass

    settings(True)
